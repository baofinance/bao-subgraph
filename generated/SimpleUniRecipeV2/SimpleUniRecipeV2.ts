// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SimpleUniRecipeV2__bakeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getInputAmountUsed(): BigInt {
    return this.value0;
  }

  getOutputAmount(): BigInt {
    return this.value1;
  }
}

export class SimpleUniRecipeV2 extends ethereum.SmartContract {
  static bind(address: Address): SimpleUniRecipeV2 {
    return new SimpleUniRecipeV2("SimpleUniRecipeV2", address);
  }

  bake(
    _basket: Address,
    _maxInput: BigInt,
    _mintAmount: BigInt
  ): SimpleUniRecipeV2__bakeResult {
    let result = super.call(
      "bake",
      "bake(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_basket),
        ethereum.Value.fromUnsignedBigInt(_maxInput),
        ethereum.Value.fromUnsignedBigInt(_mintAmount)
      ]
    );

    return new SimpleUniRecipeV2__bakeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_bake(
    _basket: Address,
    _maxInput: BigInt,
    _mintAmount: BigInt
  ): ethereum.CallResult<SimpleUniRecipeV2__bakeResult> {
    let result = super.tryCall(
      "bake",
      "bake(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_basket),
        ethereum.Value.fromUnsignedBigInt(_maxInput),
        ethereum.Value.fromUnsignedBigInt(_mintAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleUniRecipeV2__bakeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  basketRegistry(): Address {
    let result = super.call("basketRegistry", "basketRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_basketRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "basketRegistry",
      "basketRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPrice(_basket: Address, _amount: BigInt): BigInt {
    let result = super.call("getPrice", "getPrice(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_basket),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(_basket: Address, _amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrice",
      "getPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_basket),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceUSD(_basket: Address, _amount: BigInt): BigInt {
    let result = super.call(
      "getPriceUSD",
      "getPriceUSD(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_basket),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPriceUSD(
    _basket: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceUSD",
      "getPriceUSD(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_basket),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lendingRegistry(): Address {
    let result = super.call(
      "lendingRegistry",
      "lendingRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_lendingRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lendingRegistry",
      "lendingRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniRouter(): Address {
    let result = super.call("uniRouter", "uniRouter():(address)", []);

    return result[0].toAddress();
  }

  try_uniRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("uniRouter", "uniRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _lendingRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pieRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _uniV3Router(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _uniOracle(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BakeCall extends ethereum.Call {
  get inputs(): BakeCall__Inputs {
    return new BakeCall__Inputs(this);
  }

  get outputs(): BakeCall__Outputs {
    return new BakeCall__Outputs(this);
  }
}

export class BakeCall__Inputs {
  _call: BakeCall;

  constructor(call: BakeCall) {
    this._call = call;
  }

  get _basket(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _maxInput(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _mintAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BakeCall__Outputs {
  _call: BakeCall;

  constructor(call: BakeCall) {
    this._call = call;
  }

  get inputAmountUsed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class GetPriceCall extends ethereum.Call {
  get inputs(): GetPriceCall__Inputs {
    return new GetPriceCall__Inputs(this);
  }

  get outputs(): GetPriceCall__Outputs {
    return new GetPriceCall__Outputs(this);
  }
}

export class GetPriceCall__Inputs {
  _call: GetPriceCall;

  constructor(call: GetPriceCall) {
    this._call = call;
  }

  get _basket(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetPriceCall__Outputs {
  _call: GetPriceCall;

  constructor(call: GetPriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetPriceUSDCall extends ethereum.Call {
  get inputs(): GetPriceUSDCall__Inputs {
    return new GetPriceUSDCall__Inputs(this);
  }

  get outputs(): GetPriceUSDCall__Outputs {
    return new GetPriceUSDCall__Outputs(this);
  }
}

export class GetPriceUSDCall__Inputs {
  _call: GetPriceUSDCall;

  constructor(call: GetPriceUSDCall) {
    this._call = call;
  }

  get _basket(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetPriceUSDCall__Outputs {
  _call: GetPriceUSDCall;

  constructor(call: GetPriceUSDCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ToBasketCall extends ethereum.Call {
  get inputs(): ToBasketCall__Inputs {
    return new ToBasketCall__Inputs(this);
  }

  get outputs(): ToBasketCall__Outputs {
    return new ToBasketCall__Outputs(this);
  }
}

export class ToBasketCall__Inputs {
  _call: ToBasketCall;

  constructor(call: ToBasketCall) {
    this._call = call;
  }

  get _basket(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _mintAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ToBasketCall__Outputs {
  _call: ToBasketCall;

  constructor(call: ToBasketCall) {
    this._call = call;
  }

  get inputAmountUsed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateUniOracleCall extends ethereum.Call {
  get inputs(): UpdateUniOracleCall__Inputs {
    return new UpdateUniOracleCall__Inputs(this);
  }

  get outputs(): UpdateUniOracleCall__Outputs {
    return new UpdateUniOracleCall__Outputs(this);
  }
}

export class UpdateUniOracleCall__Inputs {
  _call: UpdateUniOracleCall;

  constructor(call: UpdateUniOracleCall) {
    this._call = call;
  }

  get _newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateUniOracleCall__Outputs {
  _call: UpdateUniOracleCall;

  constructor(call: UpdateUniOracleCall) {
    this._call = call;
  }
}

export class UpdateUniRouterCall extends ethereum.Call {
  get inputs(): UpdateUniRouterCall__Inputs {
    return new UpdateUniRouterCall__Inputs(this);
  }

  get outputs(): UpdateUniRouterCall__Outputs {
    return new UpdateUniRouterCall__Outputs(this);
  }
}

export class UpdateUniRouterCall__Inputs {
  _call: UpdateUniRouterCall;

  constructor(call: UpdateUniRouterCall) {
    this._call = call;
  }

  get _newRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateUniRouterCall__Outputs {
  _call: UpdateUniRouterCall;

  constructor(call: UpdateUniRouterCall) {
    this._call = call;
  }
}
